-- MySQL dump 10.13  Distrib 5.7.14, for Win64 (x86_64)
--
-- Host: localhost    Database: codeeditors
-- ------------------------------------------------------
-- Server version	5.7.14

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `configurations`
--

use codeeditors;

DROP TABLE IF EXISTS `configurations`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `configurations` (
  `cId` int(11) NOT NULL AUTO_INCREMENT,
  `cName` varchar(255) NOT NULL,
  `cVersion` varchar(255) NOT NULL,
  `cDescription` text NOT NULL,
  `cDate` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `uId` int(11) NOT NULL,
  `eId` int(11) NOT NULL,
  PRIMARY KEY (`cId`),
  KEY `uId` (`uId`),
  KEY `eId` (`eId`),
  CONSTRAINT `configurations_ibfk_1` FOREIGN KEY (`uId`) REFERENCES `users` (`uId`) ON DELETE CASCADE,
  CONSTRAINT `configurations_ibfk_2` FOREIGN KEY (`eId`) REFERENCES `editors` (`eId`) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `configurations`
--

LOCK TABLES `configurations` WRITE;
/*!40000 ALTER TABLE `configurations` DISABLE KEYS */;
INSERT INTO `configurations` VALUES (1,'myworld','1.0','{\r\n    \"editor.fontSize\": 14,\r\n    \"editor.minimap.enabled\": true,\r\n    \"editor.mouseWheelZoom\": false,\r\n    \"editor.renderIndentGuides\": true,\r\n    \"editor.wordWrap\": \"on\",\r\n    \"gist.oauth_token\": \"github token\",\r\n    \"java.errors.incompleteClasspath.severity\": \"ignore\",\r\n    \"python.formatting.provider\": \"autopep8\",\r\n    \"python.linting.pep8Enabled\": true,\r\n    \"python.linting.pylintEnabled\": false,\r\n    \"vsicons.dontShowNewVersionMessage\": true,\r\n    \"window.menuBarVisibility\": \"toggle\",\r\n    \"window.zoomLevel\": 0,\r\n    \"workbench.iconTheme\": \"vscode-icons\",\r\n    \"workbench.sideBar.location\": \"left\",\r\n    \"[c]\": {\r\n        \"editor.quickSuggestions\": false\r\n    },\r\n    \"[cpp]\": {\r\n        \"editor.quickSuggestions\": false\r\n    }\r\n}','2017-05-31 13:08:08',3,1),(2,'myworld','1.0','#+TITLE: Emacs configuration\r\n#+AUTHOR: Guillaume QUITTET\r\n#+EMAIL: guillaume.quittet@gmail.com\r\n#+DATE: Tue. 17th Jan 2017\r\n* Package Manager\r\n** Configuration\r\n#+BEGIN_SRC emacs-lisp\r\n  (require \'package)\r\n#+END_SRC\r\n** List the repositories contening them and initialize the package\r\n#+BEGIN_SRC emacs-lisp\r\n  (add-to-list \'package-archives \'(&quot;melpa&quot; . &quot;http://melpa.org/packages/&quot;))\r\n  (add-to-list \'package-archives \'(&quot;org&quot; . &quot;http://orgmode.org/elpa/&quot;) t)\r\n#+END_SRC\r\n** Package that I need.\r\n#+BEGIN_SRC emacs-lisp\r\n  (setq package-list \'(ace-popup-menu aggressive-indent anaconda-mode android-mode auctex auto-package-update bbdb bm browse-at-remote buffer-move coffee-mode column-marker company company-anaconda company-auctex company-c-headers company-edbi company-emacs-eclim company-jedi company-math company-php company-quickhelp company-restclient company-shell company-web company-ycmd dracula-theme eclim elpy emmet-mode emms expand-region flycheck flycheck-ycmd gist git git-gutter git-link helm helm-projectile htmlize iedit imenu-anywhere impatient-mode jabber js2-mode js-comint json-mode ledger-mode magit markdown-mode move-text multiple-cursors omnisharp org org-bullets org-plus-contrib ox-ioslide ox-reveal ox-twbs pdf-tools php-mode plantuml-mode projectile rainbow-delimiters rainbow-mode restclient scss-mode simple-httpd skewer-mode sql-indent sqlplus tabbar tern web-beautify web-mode whitespace-cleanup-mode yasnippet ycmd))\r\n#+END_SRC\r\n** Package initialize\r\n#+BEGIN_SRC emacs-lisp\r\n  (package-initialize)\r\n#+END_SRC\r\n** Local Packages\r\n** Fetch the list of packages available\r\n#+BEGIN_SRC emacs-lisp\r\n  (unless package-archive-contents\r\n    (package-refresh-contents))\r\n#+END_SRC\r\n** Install the missing package\r\n#+BEGIN_SRC emacs-lisp\r\n  (dolist (package package-list)\r\n    (unless (package-installed-p package)\r\n      (package-install package)))\r\n#+END_SRC\r\n* Auto generate by Emacs\r\n#+BEGIN_SRC emacs-lisp\r\n\r\n#+END_SRC\r\n* Start the server\r\n#+BEGIN_SRC emacs-lisp\r\n  (require \'server)\r\n  (unless (server-running-p) (server-start))\r\n#+END_SRC\r\n* UI configuration\r\n** Column number\r\n#+BEGIN_SRC emacs-lisp\r\n  (column-number-mode t)\r\n  (show-paren-mode 1)\r\n#+END_SRC\r\n** Menu bar/Tool bar/Scroll bar\r\n#+BEGIN_SRC emacs-lisp\r\n  (menu-bar-mode -1)\r\n  (tool-bar-mode -1)\r\n  (scroll-bar-mode -1)\r\n#+END_SRC\r\n** Replace \'yes or no\' with \'y or n\'\r\n#+BEGIN_SRC emacs-lisp\r\n(defalias \'yes-or-no-p \'y-or-n-p)\r\n#+END_SRC\r\n** Startup warning\r\n#+BEGIN_SRC emacs-lisp\r\n  (setq ad-redefinition-action \'accept)\r\n#+END_SRC\r\n** Theme\r\n#+BEGIN_SRC emacs-lisp\r\n  (load-theme \'dracula t)\r\n#+END_SRC\r\n** UTF8 everywhere\r\n#+BEGIN_SRC emacs-lisp\r\n  (setq locale-coding-system \'utf-8)\r\n  (set-terminal-coding-system \'utf-8)\r\n  (set-keyboard-coding-system \'utf-8)\r\n  (set-selection-coding-system \'utf-8)\r\n  (prefer-coding-system \'utf-8)\r\n  (set-default-coding-systems \'utf-8)\r\n  (set-language-environment \'utf-8)\r\n  (when (display-graphic-p)\r\n    (setq x-select-request-type \'(UTF8_STRING COMPOUND_TEXT TEXT STRING)))\r\n#+END_SRC\r\n* Editor settings\r\n** Clean white spaces when I save \r\n#+BEGIN_SRC emacs-lisp\r\n  (require \'whitespace-cleanup-mode)\r\n  (setq whitespace-style \'(face empty tabs lines-tail trailing))\r\n  (global-whitespace-cleanup-mode 1)\r\n#+END_SRC\r\n** Folding\r\n#+BEGIN_SRC emacs-lisp\r\n  (add-hook \'prog-mode-hook \'hs-minor-mode)\r\n#+END_SRC\r\n** Font\r\n#+BEGIN_SRC emacs-lisp\r\n  (add-to-list \'default-frame-alist \'(font . &quot;DejaVu Sans Mono-12&quot;))\r\n  (set-face-attribute \'default t :font &quot;DejaVu Sans Mono-12&quot;)\r\n#+END_SRC\r\n** Highlight the current line\r\n#+BEGIN_SRC emacs-lisp\r\n  (global-hl-line-mode)\r\n#+END_SRC\r\n** Upcase and lower case region\r\n#+BEGIN_SRC emacs-lisp\r\n  (put \'upcase-region \'disabled nil)\r\n  (put \'downcase-region \'disabled nil)\r\n#+END_SRC\r\n** visual-line-mode\r\n#+BEGIN_SRC emacs-lisp\r\n  (global-visual-line-mode 1)\r\n#+END_SRC\r\n* Backup\r\n** Set the backup to a dedicaced directory\r\n#+BEGIN_SRC emacs-lisp\r\n  (setq backup-directory-alist \'((&quot;.&quot; . &quot;~/.emacs.d/backup&quot;))\r\n    backup-by-copying t    ; Don\'t delink hardlinks\r\n    version-control t      ; Use version numbers on backups\r\n    delete-old-versions t  ; Automatically delete excess backups\r\n    kept-new-versions 20   ; how many of the newest versions to keep\r\n    kept-old-versions 5    ; and how many of the old\r\n    )\r\n#+END_SRC\r\n* Org Mode\r\n** Auto indent org file\r\n#+BEGIN_SRC emacs-lisp\r\n  (setq org-startup-indented t)\r\n#+END_SRC\r\n** Better bullets\r\n#+BEGIN_SRC emacs-lisp\r\n  (require \'org-bullets)\r\n  (add-hook \'org-mode-hook (lambda () (org-bullets-mode 1)))\r\n#+END_SRC\r\n** Ellipsis symbol\r\n#+BEGIN_SRC emacs-lisp\r\n  (setq org-ellipsis &quot;ÔñÁ&quot;)\r\n#+END_SRC\r\n** Export formats\r\n#+BEGIN_SRC emacs-lisp\r\n  (setq org-export-backends (quote (ascii beamer html icalendar latex man md org texinfo)))\r\n#+END_SRC\r\n** Language support for compiling\r\n#+BEGIN_SRC emacs-lisp\r\n  (org-babel-do-load-languages\r\n   \'org-babel-load-languages \'((C . t)\r\n                               (css . t)\r\n                               (dot . t)\r\n                               (emacs-lisp t)\r\n                               (gnuplot . t)\r\n                               (java . t)\r\n                               (latex . t)\r\n                               (makefile . t)\r\n                               (org . t)\r\n                               (python . t)\r\n                               (ruby . t)\r\n                               (sass . t)\r\n                               (scala . t)\r\n                               (sh . t)\r\n                               ))\r\n#+END_SRC\r\n** Open website in chromium\r\n#+BEGIN_SRC emacs-lisp\r\n  (setq browse-url-browser-function \'browse-url-generic\r\n        browse-url-generic-program &quot;chromium&quot;)\r\n#+END_SRC	\r\n* Terminal\r\n** Enable completion in the terminal\r\n#+BEGIN_SRC emacs-lisp\r\n  (add-hook \'term-mode-hook (lambda()\r\n          (setq yas-dont-activate t)))\r\n#+END_SRC\r\n* Plugins configuration\r\n** Ace popup menu\r\n#+BEGIN_SRC emacs-lisp\r\n  (ace-popup-menu-mode 1)\r\n  (setq ace-popup-menu-show-pane-header t)\r\n#+END_SRC\r\n** Aggressive indent: Keep code always indented\r\n#+BEGIN_SRC emacs-lisp\r\n  (global-aggressive-indent-mode 1)\r\n  (add-to-list \'aggressive-indent-excluded-modes \'html-mode)\r\n#+END_SRC\r\n** Anaconda: Python IDE\r\n#+BEGIN_SRC emacs-lisp\r\n  (require \'anaconda-mode)\r\n  (add-hook \'python-mode-hook \'anaconda-mode)\r\n  (setq python-shell-interpreter &quot;/usr/bin/python2&quot;)\r\n#+END_SRC\r\n** Android\r\n#+BEGIN_SRC emacs-lisp\r\n  (require \'android-mode)\r\n  (setq android-mode-sdk-dir \'&quot;/opt/android-sdk&quot;)\r\n#+END_SRC\r\n** Auto package update\r\n#+BEGIN_SRC emacs-lisp\r\n  (require \'auto-package-update)\r\n  (auto-package-update-maybe)\r\n  (auto-package-update-at-time &quot;21:00&quot;)\r\n  (setq auto-package-update-interval 1)\r\n  (setq auto-package-update-delete-old-versions t)\r\n  (add-hook \'auto-package-update-before-hook\r\n            (lambda () (message &quot;I will update my packages now.&quot;)))\r\n#+END_SRC\r\n** Autopair\r\nThis plugin is replaced by a mode implemented in Emacs.\r\n#+BEGIN_SRC emacs-lisp\r\n  (electric-pair-mode 1)\r\n#+END_SRC\r\n** BM\r\n#+BEGIN_SRC emacs-lisp\r\n  (require \'bm)\r\n#+END_SRC\r\n** Browse at remote: Useful for Git\r\n#+BEGIN_SRC emacs-lisp\r\n  (require \'browse-at-remote)\r\n#+END_SRC\r\n** Column Marker\r\n#+BEGIN_SRC emacs-lisp\r\n  (require \'column-marker)\r\n  (add-hook \'after-init-hook (lambda () (interactive) (column-marker-1 80)))\r\n#+END_SRC\r\n** Company\r\n#+BEGIN_SRC emacs-lisp\r\n  (require \'company)\r\n  (add-hook \'after-init-hook \'global-company-mode)\r\n  (setq company-tooltip-limit 20)                      ; bigger popup window\r\n  (setq company-tooltip-align-annotations \'t)          ; align annotations to the right tooltip border\r\n  (setq company-idle-delay .3)                         ; decrease delay before autocompletion popup shows\r\n  (setq company-begin-commands \'(self-insert-command)) ; start autocompletion only after typing\r\n#+END_SRC\r\n*** company-anaconda\r\n#+BEGIN_SRC emacs-lisp\r\n  (eval-after-load &quot;company&quot;\r\n    \'(add-to-list \'company-backends \'(company-anaconda :with company-capf)))\r\n#+END_SRC\r\n*** company-auctex\r\n#+BEGIN_SRC emacs-lisp\r\n  (require \'company-auctex)\r\n  (company-auctex-init)\r\n#+END_SRC\r\n*** company-c-headers\r\n#+BEGIN_SRC emacs-lisp\r\n  (eval-after-load &quot;company&quot;\r\n    \'(add-to-list \'company-backends \'company-c-headers))\r\n#+END_SRC\r\n*** company-edbi\r\n#+BEGIN_SRC emacs-lisp\r\n  (add-to-list \'company-backends \'company-edbi)\r\n#+END_SRC\r\n*** company-emacs-eclim\r\n#+BEGIN_SRC emacs-lisp\r\n  (require \'company-emacs-eclim)\r\n  (company-emacs-eclim-setup)\r\n  (setq company-emacs-eclim-ignore-case t)\r\n#+END_SRC\r\n*** company-jedi\r\n#+BEGIN_SRC emacs-lisp\r\n  (defun my/python-mode-hook ()\r\n    (add-to-list \'company-backends \'company-jedi))\r\n\r\n  (add-hook \'python-mode-hook \'my/python-mode-hook)\r\n#+END_SRC\r\n*** company-math\r\n#+BEGIN_SRC emacs-lisp\r\n  (add-to-list \'company-backends \'company-math-symbols-unicode)\r\n#+END_SRC\r\n*** company-omnisharp\r\n#+BEGIN_SRC emacs-lisp\r\n  (eval-after-load \'company\r\n    \'(add-to-list \'company-backends \'company-omnisharp))\r\n#+END_SRC\r\n*** company-quickhelp\r\n#+BEGIN_SRC emacs-lisp\r\n  (company-quickhelp-mode 1)\r\n  (setq company-quickhelp-delay nil)\r\n#+END_SRC\r\n*** company-restclient\r\n#+BEGIN_SRC emacs-lisp\r\n  (add-to-list \'company-backends \'company-restclient)\r\n#+END_SRC\r\n*** company-shell\r\n#+BEGIN_SRC emacs-lisp\r\n  (add-to-list \'company-backends \'company-shell)\r\n#+END_SRC\r\n*** company-web\r\n#+BEGIN_SRC emacs-lisp\r\n  (require \'company-web-html)\r\n  (require \'company-web-jade)\r\n  (require \'company-web-slim)\r\n#+END_SRC\r\n*** company-ycmd\r\n#+BEGIN_SRC emacs-lisp\r\n  (require \'company-ycmd)\r\n  (company-ycmd-setup)\r\n#+END_SRC\r\n** Eclim\r\n#+BEGIN_SRC emacs-lisp\r\n  (require \'eclim)\r\n  (require \'eclimd)\r\n  (setq eclimd-autostart t)\r\n  (add-hook \'java-mode-hook \'eclim-mode)\r\n  (setq eclimd-default-workspace \'&quot;~/Documents/Projets/Java/Projets/&quot;)\r\n  (setq help-at-pt-display-when-idle t)\r\n  (setq help-at-pt-timer-delay 0.1)\r\n  (help-at-pt-set-timer)\r\n#+END_SRC\r\n** Elpy: Python IDE\r\n#+BEGIN_SRC emacs-lisp\r\n  (elpy-enable)\r\n#+END_SRC\r\n** Emmet\r\n#+BEGIN_SRC emacs-lisp\r\n  (require \'emmet-mode)\r\n  (require \'web-mode)\r\n  (add-hook \'sgml-mode-hook \'emmet-mode)\r\n  (add-hook \'css-mode-hook  \'emmet-mode)\r\n  (add-hook \'web-mode-hook \'emmet-mode)\r\n#+END_SRC\r\n** EMMS: Emacs Muti Media Server\r\n#+BEGIN_SRC emacs-lisp\r\n  (require \'emms-setup)\r\n  (emms-all)\r\n  (emms-default-players)\r\n#+END_SRC\r\n** EWW\r\n#+BEGIN_SRC emacs-lisp\r\n  (require \'eww)\r\n  (setq eww-download-directory \'&quot;~/T├®l├®chargements/&quot;)\r\n#+END_SRC\r\n** expand-region\r\n#+BEGIN_SRC emacs-lisp\r\n  (require \'expand-region)\r\n#+END_SRC\r\n** Flycheck\r\n#+BEGIN_SRC emacs-lisp\r\n  (require \'flycheck)\r\n  (global-flycheck-mode)\r\n  (require \'flycheck-ycmd)\r\n  (flycheck-ycmd-setup)\r\n#+END_SRC\r\n** Flyspell\r\n#+BEGIN_SRC emacs-lisp\r\n  (setq ispell-program-name &quot;hunspell&quot;)\r\n  (setq ispell-dictionary &quot;fr_BE&quot;)\r\n  (global-set-key\r\n   [f3]\r\n   (lambda ()\r\n     (interactive)\r\n     (ispell-change-dictionary &quot;fr_BE&quot;)))\r\n  (global-set-key\r\n   [f4]\r\n   (lambda ()\r\n     (interactive)\r\n     (ispell-change-dictionary &quot;en_GB&quot;)))\r\n#+END_SRC\r\n** Git gutter\r\n#+BEGIN_SRC emacs-lisp\r\n  (global-git-gutter-mode +1)\r\n#+END_SRC\r\n** Helm\r\n#+BEGIN_SRC emacs-lisp\r\n  (require \'helm-config)\r\n  (require \'helm-projectile)\r\n  (helm-projectile-on)\r\n#+END_SRC\r\n** Iedit\r\n#+BEGIN_SRC emacs-lisp\r\n  (require \'iedit)\r\n#+END_SRC\r\n** Impatient Mode: HTML reload on the fly\r\nImpatient server: *http://localhost:8080/imp*\r\n#+BEGIN_SRC emacs-lisp\r\n  (require \'impatient-mode)\r\n  (add-hook \'web-mode-hook \'httpd-start)\r\n  (add-hook \'web-mode-hook \'impatient-mode)\r\n  (add-hook \'css-mode-hook \'httpd-start)\r\n  (add-hook \'css-mode-hook \'impatient-mode)\r\n#+END_SRC\r\n** JS-Comint\r\n#+BEGIN_SRC emacs-lisp\r\n  (require \'js-comint)\r\n  (setq inferioddr-js-program-command &quot;/usr/bin/java org.mozilla.javascript.tools.shell.Main&quot;)\r\n#+END_SRC\r\n** LaTeX\r\n*** Enable LaTeX mode\r\n#+BEGIN_SRC emacs-lisp\r\n  (setq Tex-PDF-mode t)\r\n#+END_SRC\r\n*** Update PDF automaticaly with DocView\r\n#+BEGIN_SRC emacs-lisp\r\n  (add-hook \'doc-view-mode-hook \'auto-revert-mode)\r\n  (add-hook \'TeX-after-compilation-finished-functions #\'TeX-revert-document-buffer)\r\n#+END_SRC\r\n*** Configuration\r\n#+BEGIN_SRC emacs-lisp\r\n  (setq TeX-auto-save t)\r\n  (setq TeX-parse-self t)\r\n  (setq-default TeX-master nil)\r\n  (add-hook \'LaTeX-mode-hook \'LaTeX-math-mode)\r\n  (add-hook \'LaTeX-mode-hook \'auto-fill-mode)\r\n  (add-hook \'LaTeX-mode-hook \'turn-on-reftex)\r\n  (setq reftex-plug-into-AUCTeX t)\r\n#+END_SRC\r\n*** Script command for LaTeX compiling\r\n#+BEGIN_SRC emacs-lisp\r\n  (setq latex-run-command &quot;pdflatex -synctex=1 -interaction=nonstopmode --shell-escape&quot;)\r\n  (setq LaTeX-command &quot;latex -synctex=1 -interaction=nonstopmode --shell-escape&quot;)\r\n#+END_SRC\r\n*** Integrate PDF Tools with Emacs\r\n#+BEGIN_SRC emacs-lisp\r\n  (setq TeX-source-correlate-method (quote synctex))\r\n  (setq TeX-source-correlate-mode t)\r\n  (setq TeX-source-correlate-start-server t)\r\n  (setq TeX-view-program-selection\r\n        (quote\r\n         ((output-pdf &quot;PDF Tools&quot;)\r\n          ((output-dvi has-no-display-manager)\r\n           &quot;dvi2tty&quot;)\r\n          ((output-dvi style-pstricks)\r\n           &quot;dvips and gv&quot;)\r\n          (output-dvi &quot;xdvi&quot;)\r\n          (output-(point)df &quot;Evince&quot;)\r\n          (output-html &quot;xdg-open&quot;))))\r\n#+END_SRC\r\n** Markdown mode\r\n#+BEGIN_SRC emacs-lisp\r\n  (autoload \'markdown-mode &quot;markdown-mode&quot;\r\n    &quot;Major mode for editing Markdown files&quot; t)\r\n  (add-to-list \'auto-mode-alist \'(&quot;\\\\.markdown\\\\\'&quot; . markdown-mode))\r\n  (add-to-list \'auto-mode-alist \'(&quot;\\\\.md\\\\\'&quot; . markdown-mode))\r\n#+END_SRC\r\n** Move text\r\n#+BEGIN_SRC emacs-lisp\r\n  (require \'move-text)\r\n  (move-text-default-bindings)\r\n#+END_SRC\r\n** Multi cursors\r\n#+BEGIN_SRC emacs-lisp\r\n  (require \'multiple-cursors)\r\n  (add-hook \'after-init-hook \'multiple-cursors-mode)\r\n#+END_SRC\r\n** Omnisharp\r\n#+BEGIN_SRC emacs-lisp\r\n  (add-hook \'csharp-mode-hook \'omnisharp-mode)\r\n  (setq omnisharp-server-executable-path &quot;/opt/ycmd/third_party/OmniSharpServer&quot;)\r\n#+END_SRC\r\n** Outline mode\r\n#+BEGIN_SRC emacs-lisp\r\n  (outline-minor-mode 1)\r\n#+END_SRC\r\n** Ox\r\n*** ox-ioslide\r\n#+BEGIN_SRC emacs-lisp\r\n  (require \'ox-ioslide)\r\n  (require \'ox-ioslide-helper)\r\n#+END_SRC\r\n*** ox-reveal\r\n#+BEGIN_SRC emacs-lisp\r\n  (require \'ox-reveal)\r\n#+END_SRC\r\nFix org-html-fontify-code error\r\n#+BEGIN_SRC emacs-lisp\r\n  (defun org-font-lock-ensure ()\r\n    (font-lock-fontify-buffer))\r\n#+END_SRC\r\n*** ox-twbs\r\n#+BEGIN_SRC emacs-lisp\r\n  (require \'ox-twbs)\r\n#+END_SRC\r\n** PDF-Tools\r\n#+BEGIN_SRC emacs-lisp\r\n  (pdf-tools-install)\r\n#+END_SRC\r\n** Rainbow\r\n#+BEGIN_SRC emacs-lisp\r\n  (require \'rainbow-mode)\r\n  (require \'web-mode)\r\n  (add-hook \'css-mode-hook \'rainbow-mode)\r\n  (add-hook \'web-mode-hook \'rainbow-mode)\r\n#+END_SRC\r\n** Rainbow delimiters\r\n#+BEGIN_SRC emacs-lisp\r\n  (add-hook \'prog-mode-hook #\'rainbow-delimiters-mode)\r\n#+END_SRC\r\n** Restclient: Show HTTP request result in XML or JSON\r\n#+BEGIN_SRC emacs-lisp\r\n  (require \'restclient)\r\n#+END_SRC\r\n** Semantic Mode\r\n#+BEGIN_SRC emacs-lisp\r\n  (semantic-mode 1)\r\n#+END_SRC\r\n** Simple HTTPD\r\n#+BEGIN_SRC emacs-lisp\r\n  (require \'simple-httpd)\r\n  (setq httpd-root &quot;/var/www/html&quot;)\r\n#+END_SRC\r\n** Skewer Mode\r\n#+BEGIN_SRC emacs-lisp\r\n  (add-hook \'js2-mode-hook \'skewer-mode)\r\n  (add-hook \'css-mode-hook \'skewer-css-mode)\r\n  (add-hook \'html-mode-hook \'skewer-html-mode)\r\n  (add-hook \'web-mode-hook \'skewer-html-mode)\r\n#+END_SRC\r\n** SQL indent\r\n#+BEGIN_SRC emacs-lisp\r\n  (eval-after-load &quot;sql&quot;\r\n    (load-library &quot;sql-indent&quot;))\r\n#+END_SRC\r\n** Tern: Tool for JavaScript\r\n#+BEGIN_SRC emacs-lisp\r\n  (add-hook \'js-mode-hook (lambda () (tern-mode t)))\r\n  (eval-after-load \'tern\r\n    \'(progn\r\n       (require \'tern-auto-complete)\r\n       (tern-ac-setup)))\r\n#+END_SRC\r\n** Uniquify: Unique buffer name\r\n#+BEGIN_SRC emacs-lisp\r\n  (setq uniquify-buffer-name-style (quote post-forward))\r\n#+END_SRC\r\n** Web beautify\r\n#+BEGIN_SRC emacs-lisp\r\n  (require \'web-beautify) ;; Not necessary if using ELPA package\r\n  (eval-after-load \'js2-mode\r\n    \'(add-hook \'js2-mode-hook\r\n               (lambda ()\r\n                 (add-hook \'before-save-hook \'web-beautify-js-buffer t t))))\r\n\r\n  ;; Or if you\'re using \'js-mode\' (a.k.a \'javascript-mode\')\r\n  (eval-after-load \'js\r\n    \'(add-hook \'js-mode-hook\r\n               (lambda ()\r\n                 (add-hook \'before-save-hook \'web-beautify-js-buffer t t))))\r\n\r\n  (eval-after-load \'json-mode\r\n    \'(add-hook \'json-mode-hook\r\n               (lambda ()\r\n                 (add-hook \'before-save-hook \'web-beautify-js-buffer t t))))\r\n\r\n  (eval-after-load \'sgml-mode\r\n    \'(add-hook \'html-mode-hook\r\n               (lambda ()\r\n                 (add-hook \'before-save-hook \'web-beautify-html-buffer t t))))\r\n\r\n  (eval-after-load \'web-mode\r\n    \'(add-hook \'web-mode-hook\r\n               (lambda ()\r\n                 (add-hook \'before-save-hook \'web-beautify-html-buffer t t))))\r\n\r\n  (eval-after-load \'css-mode\r\n    \'(add-hook \'css-mode-hook\r\n               (lambda ()\r\n                 (add-hook \'before-save-hook \'web-beautify-css-buffer t t))))\r\n#+END_SRC\r\n** Web Mode\r\n#+BEGIN_SRC emacs-lisp\r\n  (require \'web-mode)\r\n  (add-to-list \'auto-mode-alist \'(&quot;\\\\.phtml\\\\\'&quot; . web-mode))\r\n  (add-to-list \'auto-mode-alist \'(&quot;\\\\.tpl\\\\.php\\\\\'&quot; . web-mode))\r\n  (add-to-list \'auto-mode-alist \'(&quot;\\\\.[agj]sp\\\\\'&quot; . web-mode))\r\n  (add-to-list \'auto-mode-alist \'(&quot;\\\\.as[cp]x\\\\\'&quot; . web-mode))\r\n  (add-to-list \'auto-mode-alist \'(&quot;\\\\.erb\\\\\'&quot; . web-mode))\r\n  (add-to-list \'auto-mode-alist \'(&quot;\\\\.mustache\\\\\'&quot; . web-mode))\r\n  (add-to-list \'auto-mode-alist \'(&quot;\\\\.djhtml\\\\\'&quot; . web-mode))\r\n  (add-to-list \'auto-mode-alist \'(&quot;\\\\.html?\\\\\'&quot; . web-mode))\r\n#+END_SRC\r\n** Winner mode\r\n#+BEGIN_SRC emacs-lisp\r\n  (when (fboundp \'winner-mode)\r\n        (winner-mode 1))\r\n#+END_SRC\r\n** YASNIPPET\r\n#+BEGIN_SRC emacs-lisp\r\n  (require \'yasnippet)\r\n  (yas-global-mode 1)\r\n#+END_SRC\r\n** YCMD\r\n#+BEGIN_SRC emacs-lisp\r\n  (require \'ycmd)\r\n  (add-hook \'after-init-hook #\'global-ycmd-mode)\r\n  (set-variable \'ycmd-server-command \'(&quot;python&quot; &quot;/opt/ycmd/ycmd&quot;))\r\n  (set-variable \'ycmd-global-config &quot;/opt/ycmd/examples/.ycm_extra_conf.py&quot;)\r\n#+END_SRC\r\n* Keybinding\r\n** BM\r\n#+BEGIN_SRC emacs-lisp\r\n  (global-set-key (kbd &quot;&lt;C-f2&gt;&quot;) \'bm-toggle)\r\n  (global-set-key (kbd &quot;&lt;f2&gt;&quot;)   \'bm-next)\r\n  (global-set-key (kbd &quot;&lt;S-f2&gt;&quot;) \'bm-previous)\r\n#+END_SRC\r\n** Browse at remote: Useful for Git\r\n#+BEGIN_SRC emacs-lisp\r\n    (global-set-key (kbd &quot;C-c g g&quot;) \'browse-at-remote)\r\n#+END_SRC\r\n** Buffer Move\r\n#+BEGIN_SRC emacs-lisp\r\n  (require \'buffer-move)\r\n  (global-set-key (kbd &quot;&lt;C-S-up&gt;&quot;)     \'buf-move-up)\r\n  (global-set-key (kbd &quot;&lt;C-S-down&gt;&quot;)   \'buf-move-down)\r\n  (global-set-key (kbd &quot;&lt;C-S-left&gt;&quot;)   \'buf-move-left)\r\n  (global-set-key (kbd &quot;&lt;C-S-right&gt;&quot;)  \'buf-move-right)\r\n#+END_SRC\r\n** Company\r\n*** company-quickhelp\r\n#+BEGIN_SRC emacs-lisp\r\n  (eval-after-load \'company\r\n    \'(define-key company-active-map (kbd &quot;M-h&quot;) #\'company-quickhelp-manual-begin))\r\n#+END_SRC\r\n*** company-web\r\n#+BEGIN_SRC emacs-lisp\r\n  (global-set-key (kbd &quot;C-c /&quot;) \'company-files)        ; Force complete file names on &quot;C-c /&quot; key\r\n#+END_SRC\r\n** EMMS: Emacs Multi Media Server\r\n#+BEGIN_SRC emacs-lisp\r\n  (global-set-key (kbd &quot;C-c e SPC&quot;) \'emms-pause)\r\n  (global-set-key (kbd &quot;C-c e k&quot;) \'emms-stop)\r\n  (global-set-key (kbd &quot;C-c e n&quot;) \'emms-next)\r\n  (global-set-key (kbd &quot;C-c e p&quot;) \'emms-previous)\r\n  (global-set-key (kbd &quot;C-c e +&quot;) \'emms-seek-forward)\r\n  (global-set-key (kbd &quot;C-c e -&quot;) \'emms-seek-backward)\r\n  (global-set-key (kbd &quot;C-c e s&quot;) \'emms-toggle-random-playlist)\r\n  (global-set-key (kbd &quot;C-c e r t&quot;) \'emms-toggle-repeat-track)\r\n  (global-set-key (kbd &quot;C-c e r p&quot;) \'emms-toggle-repeat-playlist)\r\n#+END_SRC\r\n** expand-region\r\n#+BEGIN_SRC emacs-lisp\r\n  (global-set-key (kbd &quot;M-i&quot;) \'er/expand-region)\r\n#+END_SRC\r\n** Helm\r\n#+BEGIN_SRC emacs-lisp\r\n  (global-set-key (kbd &quot;M-x&quot;) \'helm-M-x)\r\n#+END_SRC\r\n** IMenu\r\n#+BEGIN_SRC emacs-lisp\r\n  (global-set-key (kbd &quot;C-.&quot;) #\'imenu-anywhere)\r\n#+END_SRC\r\n** JS-Comint\r\n#+BEGIN_SRC emacs-lisp\r\n  (add-hook \'js2-mode-hook \'(lambda () \r\n                              (local-set-key &quot;\\C-x\\C-e&quot; \'js-send-last-sexp)\r\n                              (local-set-key &quot;\\C-\\M-x&quot; \'js-send-last-sexp-and-go)\r\n                              (local-set-key &quot;\\C-cb&quot; \'js-send-buffer)\r\n                              (local-set-key &quot;\\C-c\\C-b&quot; \'js-send-buffer-and-go)\r\n                              (local-set-key &quot;\\C-cl&quot; \'js-load-file-and-go)\r\n                              ))\r\n#+END_SRC\r\n** Multi cursors\r\n#+BEGIN_SRC emacs-lisp\r\n    (global-set-key (kbd &quot;C-S-c C-S-c&quot;) \'mc/edit-lines)\r\n    (global-set-key (kbd &quot;C-&gt;&quot;) \'mc/mark-next-like-this)\r\n    (global-set-key (kbd &quot;C-&lt;&quot;) \'mc/mark-previous-like-this)\r\n    (global-set-key (kbd &quot;C-c C-&lt;&quot;) \'mc/mark-all-like-this)\r\n    (global-set-key (kbd &quot;C-S-&lt;mouse-1&gt;&quot;) \'mc/add-cursor-on-click)\r\n#+END_SRC\r\n** ORG Mode\r\n#+BEGIN_SRC emacs-lisp\r\n  (global-set-key (kbd &quot;C-c l&quot;) \'org-store-link)\r\n  (global-set-key (kbd &quot;C-c a&quot;) \'org-agenda)\r\n  (global-set-key (kbd &quot;C-c b&quot;) \'org-iswitchb)\r\n#+END_SRC\r\n** Web beautify\r\n#+BEGIN_SRC emacs-lisp\r\n  (eval-after-load \'js2-mode\r\n    \'(define-key js2-mode-map (kbd &quot;C-c b&quot;) \'web-beautify-js))\r\n  ;; Or if you\'re using \'js-mode\' (a.k.a \'javascript-mode\')\r\n  (eval-after-load \'js\r\n    \'(define-key js-mode-map (kbd &quot;C-c b&quot;) \'web-beautify-js))\r\n\r\n  (eval-after-load \'json-mode\r\n    \'(define-key json-mode-map (kbd &quot;C-c b&quot;) \'web-beautify-js))\r\n\r\n  (eval-after-load \'sgml-mode\r\n    \'(define-key html-mode-map (kbd &quot;C-c b&quot;) \'web-beautify-html))\r\n\r\n  (eval-after-load \'web-mode\r\n    \'(define-key web-mode-map (kbd &quot;C-c b&quot;) \'web-beautify-html))\r\n\r\n  (eval-after-load \'css-mode\r\n    \'(define-key css-mode-map (kbd &quot;C-c b&quot;) \'web-beautify-css))\r\n#+END_SRC\r\n* EMail\r\n** Contacts\r\n#+BEGIN_SRC emacs-lisp\r\n  (require \'bbdb)\r\n  (bbdb-initialize \'gnus \'message)\r\n  (bbdb-insinuate-message)\r\n  (add-hook \'gnus-startup-hook \'bbdb-insinuate-gnus)\r\n  (setq bbdb-file &quot;~/Documents/Cloud/Mails/Contacts/.bbdb.gpg&quot;)\r\n  (setq bbdb-send-mail-style \'gnus)\r\n  (setq bbdb-complete-name-full-completion t)\r\n  (setq bbdb-completion-type \'primary-or-name)\r\n  (setq bbdb-complete-name-allow-cycling t)\r\n  (setq bbdb-always-add-address t)\r\n  (setq bbbd-message-caching-enabled t)\r\n  (setq bbdb-use-alternate-names t)\r\n  (setq bbdb-north-american-phone-numbers-p nil)\r\n  (setq\r\n   bbdb-offer-save 1\r\n   bbdb-use-pop-up t\r\n   bbdb-electric-p t\r\n   bbdb-popup-target-lines  1\r\n   )\r\n\r\n#+END_SRC\r\n** Mails folder\r\n#+BEGIN_SRC emacs-lisp\r\n  (setq gnus-always-read-dribble-file t)\r\n  (setq message-directory &quot;~/Documents/Cloud/Mails&quot;)\r\n  (setq gnus-secondary-select-methods\r\n	\'((nnmaildir &quot;GMail&quot; (directory &quot;~/Documents/Cloud/Mails&quot;))))\r\n  (setq gnus-directory &quot;~/Documents/Cloud/Mails/News/&quot;)\r\n  (setq nnfolder-directory &quot;~/Documents/Cloud/Mails/Archives/&quot;)\r\n#+END_SRC\r\n** Send function\r\n#+BEGIN_SRC emacs-lisp\r\n  (setq send-mail-function \'smtpmail-send-it\r\n	smtpmail-smtp-server  &quot;smtp.gmail.com&quot;\r\n	smtpmail-stream-type  \'ssl\r\n	smtpmail-smtp-service 465)\r\n#+END_SRC\r\n* Functions','2017-05-31 11:02:03',3,3),(3,'I love linux','25.0.1',';; Turn off mouse interface early in startup to avoid momentary display\r\n(if (fboundp \'menu-bar-mode) (menu-bar-mode -1))\r\n(if (fboundp \'tool-bar-mode) (tool-bar-mode -1))\r\n(if (fboundp \'scroll-bar-mode) (scroll-bar-mode -1))\r\n\r\n(package-initialize)\r\n\r\n;; No splash screen please ... jeez\r\n(setq inhibit-startup-message t)\r\n\r\n;; Set path to dependencies\r\n(setq site-lisp-dir\r\n      (expand-file-name \"site-lisp\" user-emacs-directory))\r\n\r\n(setq settings-dir\r\n      (expand-file-name \"settings\" user-emacs-directory))\r\n\r\n;; Set up load path\r\n(add-to-list \'load-path settings-dir)\r\n(add-to-list \'load-path site-lisp-dir)\r\n\r\n;; Keep emacs Custom-settings in separate file\r\n(setq custom-file (expand-file-name \"custom.el\" user-emacs-directory))\r\n(load custom-file)\r\n\r\n;; Set up appearance early\r\n(require \'appearance)\r\n\r\n;; Settings for currently logged in user\r\n(setq user-settings-dir\r\n      (concat user-emacs-directory \"users/\" user-login-name))\r\n(add-to-list \'load-path user-settings-dir)\r\n\r\n;; Add external projects to load path\r\n(dolist (project (directory-files site-lisp-dir t \"\\\\w+\"))\r\n  (when (file-directory-p project)\r\n    (add-to-list \'load-path project)))\r\n\r\n;; Write backup files to own directory\r\n(setq backup-directory-alist\r\n      `((\".\" . ,(expand-file-name\r\n                 (concat user-emacs-directory \"backups\")))))\r\n\r\n;; Make backups of files, even when they\'re in version control\r\n(setq vc-make-backup-files t)\r\n\r\n;; Save point position between sessions\r\n(require \'saveplace)\r\n(setq-default save-place t)\r\n(setq save-place-file (expand-file-name \".places\" user-emacs-directory))\r\n\r\n;; Are we on a mac?\r\n(setq is-mac (equal system-type \'darwin))\r\n\r\n;; Setup packages\r\n(require \'setup-package)\r\n\r\n;; Install extensions if they\'re missing\r\n(defun init--install-packages ()\r\n  (packages-install\r\n   \'(magit\r\n     edn\r\n     inflections\r\n     hydra\r\n     paredit\r\n     move-text\r\n     gist\r\n     htmlize\r\n     visual-regexp\r\n     markdown-mode\r\n     fill-column-indicator\r\n     flycheck\r\n     flycheck-pos-tip\r\n     flycheck-clojure\r\n     flx\r\n     f\r\n     flx-ido\r\n     dired-details\r\n     css-eldoc\r\n     yasnippet\r\n     smartparens\r\n     ido-vertical-mode\r\n     ido-at-point\r\n     simple-httpd\r\n     guide-key\r\n     nodejs-repl\r\n     restclient\r\n     highlight-escape-sequences\r\n     whitespace-cleanup-mode\r\n     elisp-slime-nav\r\n     dockerfile-mode\r\n     clojure-mode\r\n     clojure-mode-extra-font-locking\r\n     groovy-mode\r\n     prodigy\r\n     cider\r\n     yesql-ghosts\r\n     string-edit\r\n     )))\r\n\r\n(condition-case nil\r\n    (init--install-packages)\r\n  (error\r\n   (package-refresh-contents)\r\n   (init--install-packages)))\r\n\r\n;; Lets start with a smattering of sanity\r\n(require \'sane-defaults)\r\n\r\n;; Setup environment variables from the user\'s shell.\r\n(when is-mac\r\n  (require-package \'exec-path-from-shell)\r\n  (exec-path-from-shell-initialize))\r\n\r\n;; guide-key\r\n(require \'guide-key)\r\n(setq guide-key/guide-key-sequence \'(\"C-x r\" \"C-x 4\" \"C-x v\" \"C-x 8\" \"C-x +\"))\r\n(guide-key-mode 1)\r\n(setq guide-key/recursive-key-sequence-flag t)\r\n(setq guide-key/popup-window-position \'bottom)\r\n\r\n;; Setup extensions\r\n(eval-after-load \'ido \'(require \'setup-ido))\r\n(eval-after-load \'org \'(require \'setup-org))\r\n(eval-after-load \'dired \'(require \'setup-dired))\r\n(eval-after-load \'magit \'(require \'setup-magit))\r\n(eval-after-load \'grep \'(require \'setup-rgrep))\r\n(eval-after-load \'shell \'(require \'setup-shell))\r\n(require \'setup-hippie)\r\n(require \'setup-yasnippet)\r\n(require \'setup-perspective)\r\n(require \'setup-ffip)\r\n(require \'setup-html-mode)\r\n(require \'setup-paredit)\r\n\r\n(require \'prodigy)\r\n(global-set-key (kbd \"C-x M-m\") \'prodigy)\r\n\r\n;; Font lock dash.el\r\n(eval-after-load \"dash\" \'(dash-enable-font-lock))\r\n\r\n;; Default setup of smartparens\r\n(require \'smartparens-config)\r\n(setq sp-autoescape-string-quote nil)\r\n(--each \'(css-mode-hook\r\n          restclient-mode-hook\r\n          js-mode-hook\r\n          java-mode\r\n          ruby-mode\r\n          markdown-mode\r\n          groovy-mode\r\n          scala-mode)\r\n  (add-hook it \'turn-on-smartparens-mode))\r\n\r\n;; Language specific setup files\r\n(eval-after-load \'js2-mode \'(require \'setup-js2-mode))\r\n(eval-after-load \'ruby-mode \'(require \'setup-ruby-mode))\r\n(eval-after-load \'clojure-mode \'(require \'setup-clojure-mode))\r\n(eval-after-load \'markdown-mode \'(require \'setup-markdown-mode))\r\n\r\n;; Load stuff on demand\r\n(autoload \'skewer-start \"setup-skewer\" nil t)\r\n(autoload \'skewer-demo \"setup-skewer\" nil t)\r\n(autoload \'auto-complete-mode \"auto-complete\" nil t)\r\n(eval-after-load \'flycheck \'(require \'setup-flycheck))\r\n\r\n;; Map files to modes\r\n(require \'mode-mappings)\r\n\r\n;; Highlight escape sequences\r\n(require \'highlight-escape-sequences)\r\n(hes-mode)\r\n(put \'font-lock-regexp-grouping-backslash \'face-alias \'font-lock-builtin-face)\r\n\r\n;; Visual regexp\r\n(require \'visual-regexp)\r\n(define-key global-map (kbd \"M-&\") \'vr/query-replace)\r\n(define-key global-map (kbd \"M-/\") \'vr/replace)\r\n\r\n;; Functions (load all files in defuns-dir)\r\n(setq defuns-dir (expand-file-name \"defuns\" user-emacs-directory))\r\n(dolist (file (directory-files defuns-dir t \"\\\\w+\"))\r\n  (when (file-regular-p file)\r\n    (load file)))\r\n\r\n(require \'expand-region)\r\n(require \'multiple-cursors)\r\n(require \'delsel)\r\n(require \'jump-char)\r\n(require \'eproject)\r\n(require \'wgrep)\r\n(require \'smart-forward)\r\n(require \'change-inner)\r\n(require \'multifiles)\r\n\r\n;; Don\'t use expand-region fast keys\r\n(setq expand-region-fast-keys-enabled nil)\r\n\r\n;; Show expand-region command used\r\n(setq er--show-expansion-message t)\r\n\r\n;; Fill column indicator\r\n(require \'fill-column-indicator)\r\n(setq fci-rule-color \"#111122\")\r\n\r\n;; Browse kill ring\r\n(require \'browse-kill-ring)\r\n(setq browse-kill-ring-quit-action \'save-and-restore)\r\n\r\n;; Smart M-x is smart\r\n(require \'smex)\r\n(smex-initialize)\r\n\r\n;; Setup key bindings\r\n(require \'key-bindings)\r\n\r\n;; Misc\r\n(require \'project-archetypes)\r\n(require \'my-misc)\r\n(when is-mac (require \'mac))\r\n\r\n;; Elisp go-to-definition with M-. and back again with M-,\r\n(autoload \'elisp-slime-nav-mode \"elisp-slime-nav\")\r\n(add-hook \'emacs-lisp-mode-hook (lambda () (elisp-slime-nav-mode t) (eldoc-mode 1)))\r\n\r\n;; Emacs server\r\n(require \'server)\r\n(unless (server-running-p)\r\n  (server-start))\r\n\r\n;; Run at full power please\r\n(put \'downcase-region \'disabled nil)\r\n(put \'upcase-region \'disabled nil)\r\n(put \'narrow-to-region \'disabled nil)\r\n\r\n;; Conclude init by setting up specifics for the current user\r\n(when (file-exists-p user-settings-dir)\r\n  (mapc \'load (directory-files user-settings-dir nil \"^[^#].*el$\")))','2017-05-31 13:04:48',4,3),(5,'myworld','1.0','&quot; ========================================\r\n&quot;       Coded by Guillaume QUITTET\r\n&quot;         Date Tue. 1st Nov 2016\r\n&quot; ========================================\r\nset nocompatible              &quot; be iMproved, required\r\nfiletype off                  &quot; required\r\n\r\n&quot; set the runtime path to include Vundle and initialize\r\nset rtp+=~/.vim/bundle/Vundle.vim\r\ncall vundle#begin()\r\n&quot; alternatively, pass a path where Vundle should install pl ugins\r\n&quot;call vundle#begin(\'~/some/path/here\')\r\n\r\n&quot; let Vundle manage Vundle, required\r\nPlugin \'VundleVim/Vundle.vim\'\r\n\r\n&quot; c.vim : Speed up c writing on vim\r\nPlugin \'vim-scripts/c.vim\'\r\n\r\n&quot; Clang-complete : for C/C++ autocomplete\r\nPlugin \'Rip-Rip/clang_complete\'\r\n\r\n&quot; VIM Csharp\r\nPlugin \'OrangeT/vim-csharp\'\r\n\r\n&quot; VIM-Dispatch : Useful for starting Omnisharp\r\nPlugin \'tpope/vim-dispatch\'\r\n\r\n&quot; Easy Motion : faster move in vim\r\nPlugin \'easymotion/vim-easymotion\'\r\n\r\n&quot; Emmet : new ZenCoding\r\n&quot; Use abreviations and then type : &lt;C-Y&gt;,\r\nPlugin \'vim-scripts/Emmet.vim\'\r\n\r\n&quot; FastFold plugin\r\nPlugin \'Konfekt/FastFold\'\r\n\r\n&quot; The following are examples of different formats supported.\r\n&quot; Keep Plugin commands between vundle#begin/end.\r\n&quot; plugin on GitHub repo\r\nPlugin \'tpope/vim-fugitive\'\r\n\r\n&quot; Indent Guide\r\nPlugin \'nathanaelkane/vim-indent-guides\'\r\n\r\n&quot; Java auto complete\r\nPlugin \'vim-scripts/javacomplete\'\r\n\r\n&quot; Jedi vim : Python completition\r\n&quot; Don\'t forget to install this : sudo pip install jedi\r\nPlugin \'davidhalter/jedi-vim\'\r\n\r\n&quot; Python-mode : VIM as a python ide\r\nPlugin \'klen/python-mode\'\r\n\r\n&quot; VIM-LaTeX : VIM as a LaTeX IDE\r\nPlugin \'vim-latex/vim-latex\'\r\n\r\n&quot; Markdown Preview\r\nPlugin \'suan/vim-instant-markdown\'\r\n\r\n&quot; Matchit : useful to switch between the start and the end of a function\r\nPlugin \'tmhedberg/matchit\'\r\n\r\n&quot; NERDCommenter : Better comments in vim\r\nPlugin \'scrooloose/nerdcommenter\'\r\n\r\n&quot; Numbers.vim\r\nPlugin \'myusuf3/numbers.vim\'\r\n\r\n&quot; OmniSharp\r\nPlugin \'OmniSharp/omnisharp-vim\'\r\n\r\n&quot; Dracula theme\r\nPlugin \'dracula/vim\'\r\n\r\n&quot; Sparkup : Zen coding only for html\r\nPlugin \'rstacruz/sparkup\'\r\n\r\n&quot; SuperTab : Useful completiton\r\nPlugin \'ervandew/supertab\'\r\n\r\n&quot; Surround\r\nPlugin \'tpope/vim-surround\'\r\n\r\n&quot; Syntastic : Check errors\r\nPlugin \'scrooloose/syntastic\'\r\n\r\n&quot; Tabular : useful for great alignement\r\nPlugin \'godlygeek/tabular\'\r\n\r\n&quot; TagBar\r\nPlugin \'vim-scripts/Tagbar\'\r\n\r\n&quot; Vim trailing space : show unwanted space\r\nPlugin \'bronson/vim-trailing-whitespace\'\r\n\r\n&quot; UndoTree : See all undos\r\nPlugin \'mbbill/undotree\'\r\n\r\n&quot; ZoomWin : Show a buffer only without kill the others\r\n&quot; Use &lt;C-w&gt;o to show and hide buffer\r\nPlugin \'vim-scripts/ZoomWin\'\r\n\r\n&quot; All of your Plugins must be added before the following line\r\ncall vundle#end()            &quot; required\r\nfiletype plugin indent on    &quot; required\r\n&quot; To ignore plugin indent changes, instead use:\r\n&quot;filetype plugin on\r\n&quot;\r\n&quot; Brief help\r\n&quot; :PluginList       - lists configured plugins\r\n&quot; :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate\r\n&quot; :PluginSearch foo - searches for foo; append `!` to refresh local cache\r\n&quot; :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal\r\n&quot;\r\n&quot; see :h vundle for more details or wiki for FAQ\r\n&quot; Put your non-Plugin stuff after this line\r\n&quot; ====================================================\r\n&quot; Global configuration\r\n&quot; ====================================================\r\n&quot;\r\nset autowrite &quot; Save automatically all the buffers in vim\r\nset backup\r\nset colorcolumn=+1  &quot; Set the 80 character column\r\nset cursorline      &quot; Highlight the current line\r\nset expandtab		&quot; Show spaces instead of tabs\r\nset foldenable                  &quot; Auto fold code\r\nset foldmethod=syntax       &quot; Fold are defined by syntax highlighting\r\nset formatoptions+=t\r\nset hidden &quot; Any buffer can be hidden\r\nset history=1000 &quot; Set a huge history\r\nset hlsearch 		&quot; highlight the search result\r\nset ignorecase                  &quot; Case insensitive search\r\nset incsearch       &quot; Find as I type during the search\r\nset linespace=0 &quot; No extra spaces between rows\r\nset list\r\nset listchars=tab:ÔÇ║\\ ,trail:ÔÇó,extends:#,nbsp:. &quot; Highlight problematic whitespace\r\nset nojoinspaces    &quot; Prevents inserting two spaces after punctuation on a join (J)\r\nset path+=**        &quot; fuzzy matching\r\nset relativenumber 		&quot; set the number in vim\r\nset scrolljump=5                &quot; Lines to scroll when cursor leaves screen\r\nset scrolloff=3                 &quot; Minimum lines to keep above and below cursor\r\nset shiftwidth=4	&quot; set the tab size\r\nset showmatch       &quot; Show current brackets\r\nset smartcase                   &quot; Case sensitive when uc present\r\nset smartindent 	&quot; set auto ident\r\nset spelllang=en_us\r\nset spellsuggest=best\r\nset splitbelow      &quot; Puts new split windows to the bottom of the current\r\nset splitright      &quot; Puts new vsplit windows to the right of the current\r\nset tabstop=4		&quot; limit the tabs to 4\r\nset textwidth=80           &quot; Set the text width to 80 characters\r\nset whichwrap=b,s,h,l,&lt;,&gt;,[,]   &quot; Backspace and cursor keys wrap too\r\nset wrap                        &quot; Set wrapping\r\nset wildmenu                    &quot; Show list instead of just completing\r\nset wildmode=list:longest,full  &quot; Command &lt;Tab&gt; completion, list matches, then longest common part, then all.\r\nset winminheight=0              &quot; Windows can be 0 line high\r\nset wm=2            &quot; set a space before the text\r\n\r\n&quot; Initialize directories : Thanks to SPF13 : The ultimate vim configuration\r\n    function! InitializeDirectories()\r\n        let parent = $HOME\r\n        let prefix = \'vim\'\r\n        let dir_list = {\r\n                    \\ \'backup\': \'backupdir\',\r\n                    \\ \'views\': \'viewdir\',\r\n                    \\ \'undos\' : \'undodir\',\r\n                    \\ \'swap\': \'directory\' }\r\n\r\n        if has(\'persistent_undo\')\r\n            set undodir=~/.vim/.undos/\r\n            set undofile                &quot; So is persistent undo ...\r\n            set undolevels=1000         &quot; Maximum number of changes that can be undone\r\n            set undoreload=10000        &quot; Maximum number lines to save for undo on a buffer reload\r\n        endif\r\n\r\n        for [dirname, settingname] in items(dir_list)\r\n            let directory = parent . \'/.\'.  prefix . \'/.\' . dirname . \'/\'\r\n            if exists(&quot;*mkdir&quot;)\r\n                if !isdirectory(directory)\r\n                    call mkdir(directory)\r\n                endif\r\n            endif\r\n            if !isdirectory(directory)\r\n                echo &quot;Warning: Unable to create backup directory: &quot; . directory\r\n                echo &quot;Try: mkdir -p &quot; . directory\r\n            else\r\n                let directory = substitute(directory, &quot; &quot;, &quot;\\\\\\\\ &quot;, &quot;g&quot;)\r\n                exec &quot;set &quot; . settingname . &quot;=&quot; . directory\r\n            endif\r\n        endfor\r\n        set backupdir=~/.vim/.backup/\r\n        set directory=~/.vim/.swap/\r\n        set viewdir=~/.vim/.views/\r\n    endfunction\r\n    call InitializeDirectories()\r\n\r\n\r\n&quot; Useful git help\r\n&quot; Instead of reverting the cursor to the last position in the buffer, we\r\n&quot; &quot; set it to the first line when editing a git commit message\r\nau FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos(\'.\', [0, 1, 1, 0])\r\n\r\n&quot; Enable Omni Completiton\r\nautocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS\r\nautocmd FileType cs setlocal omnifunc=OmniSharp#Complete\r\nautocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags\r\nautocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS\r\nautocmd FileType java set omnifunc=javacomplete#Complete\r\nautocmd FileType python setlocal omnifunc=pythoncomplete#Complete\r\nautocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags\r\nautocmd FileType ruby setlocal omnifunc=rubycomplete#Complete\r\nautocmd FileType haskell setlocal omnifunc=necoghc#omnifunc\r\n\r\n&quot;=====================================================\r\n&quot; Keymap configuration\r\n&quot;=====================================================\r\nlet mapleader = &quot;,&quot;\r\nlet g:mapleader = &quot;,&quot;\r\n\r\n&quot; Buffer\r\nnmap &lt;leader&gt;bn :bnext&lt;CR&gt;\r\nnmap &lt;leader&gt;bp :bprevious&lt;CR&gt;\r\nnmap &lt;leader&gt;bf :bfirst&lt;CR&gt;\r\nnmap &lt;leader&gt;bd :bdelete&lt;CR&gt;\r\n\r\n&quot; Disable the arrow keys\r\nnmap &lt;UP&gt; &lt;NOP&gt;\r\nnmap &lt;DOWN&gt; &lt;NOP&gt;\r\nnmap &lt;LEFT&gt; &lt;NOP&gt;\r\nnmap &lt;RIGHT&gt; &lt;NOP&gt;\r\nimap &lt;UP&gt; &lt;NOP&gt;\r\nimap &lt;DOWN&gt; &lt;NOP&gt;\r\nimap &lt;LEFT&gt; &lt;NOP&gt;\r\nimap &lt;RIGHT&gt; &lt;NOP&gt;\r\nvmap &lt;UP&gt; &lt;NOP&gt;\r\nvmap &lt;DOWN&gt; &lt;NOP&gt;\r\nvmap &lt;LEFT&gt; &lt;NOP&gt;\r\nvmap &lt;RIGHT&gt; &lt;NOP&gt;\r\n\r\n&quot; Git\r\nnmap &lt;leader&gt;gs :Gstatus&lt;CR&gt;\r\nnmap &lt;leader&gt;ga :Git add -A&lt;CR&gt;\r\nnmap &lt;leader&gt;gc :Gcommit&lt;CR&gt;\r\nnmap &lt;leader&gt;gd :Gdiff&lt;CR&gt;\r\nnmap &lt;leader&gt;gl :Glog&lt;CR&gt;\r\nnmap &lt;leader&gt;gp :Gpush&lt;CR&gt;\r\nnmap &lt;leader&gt;gr :Gread&lt;CR&gt;\r\nnmap &lt;leader&gt;gw :Gwrite&lt;CR&gt;\r\nnmap &lt;leader&gt;ge :Gedit&lt;CR&gt;\r\n\r\n&quot; Highlight\r\nmap &lt;C-h&gt; :nohl&lt;CR&gt;\r\n\r\n&quot; Fix the indentation\r\nnmap &lt;Leader&gt;fi gg=G&lt;CR&gt;\r\nvmap &lt;Leader&gt;fi =&lt;CR&gt;\r\n\r\n&quot; Languagetool\r\nnmap &lt;Leader&gt;lc :LanguageToolCheck&lt;CR&gt;\r\nvmap &lt;Leader&gt;lc :LanguageToolCheck&lt;CR&gt;\r\nnmap &lt;Leader&gt;lh :LanguageToolClear&lt;CR&gt;\r\nvmap &lt;Leader&gt;lh :LanguageToolClear&lt;CR&gt;\r\nnmap &lt;Leader&gt;ls :call SwitchLanguage()&lt;CR&gt;\r\nvmap &lt;Leader&gt;ls :call SwitchLanguage()&lt;CR&gt;\r\n\r\n&quot; Numbers.vim\r\nnnoremap &lt;F3&gt; :NumbersToggle&lt;CR&gt;\r\nnnoremap &lt;F4&gt; :NumbersOnOff&lt;CR&gt;\r\n\r\n&quot; Set a good paste\r\nnmap &lt;leader&gt;p :set paste&lt;CR&gt;\r\nvmap &lt;leader&gt;p :set paste&lt;CR&gt;\r\nnmap &lt;leader&gt;np :set nopaste&lt;CR&gt;\r\nvmap &lt;leader&gt;np :set nopaste&lt;CR&gt;\r\n\r\n&quot; Sparkup\r\nlet g:sparkupExecuteMapping=\'&lt;Leader&gt;se\'\r\nlet g:sparkupNextMapping=\'&lt;Leader&gt;sn\'\r\n\r\n&quot; Tabular\r\nnmap &lt;Leader&gt;t&amp; :Tabularize /&amp;&lt;CR&gt;\r\nvmap &lt;Leader&gt;t&amp; :Tabularize /&amp;&lt;CR&gt;\r\nnmap &lt;Leader&gt;t= :Tabularize /^[^=]*\\zs=&lt;CR&gt;\r\nvmap &lt;Leader&gt;t= :Tabularize /^[^=]*\\zs=&lt;CR&gt;\r\nnmap &lt;Leader&gt;t=&gt; :Tabularize /=&gt;&lt;CR&gt;\r\nvmap &lt;Leader&gt;t=&gt; :Tabularize /=&gt;&lt;CR&gt;\r\nnmap &lt;Leader&gt;t: :Tabularize /:&lt;CR&gt;\r\nvmap &lt;Leader&gt;t: :Tabularize /:&lt;CR&gt;\r\nnmap &lt;Leader&gt;t:: :Tabularize /:\\zs&lt;CR&gt;\r\nvmap &lt;Leader&gt;t:: :Tabularize /:\\zs&lt;CR&gt;\r\nnmap &lt;Leader&gt;t, :Tabularize /,&lt;CR&gt;\r\nvmap &lt;Leader&gt;t, :Tabularize /,&lt;CR&gt;\r\nnmap &lt;Leader&gt;t,, :Tabularize /,\\zs&lt;CR&gt;\r\nvmap &lt;Leader&gt;t,, :Tabularize /,\\zs&lt;CR&gt;\r\nnmap &lt;Leader&gt;t&lt;Bar&gt; :Tabularize /&lt;Bar&gt;&lt;CR&gt;\r\nvmap &lt;Leader&gt;t&lt;Bar&gt; :Tabularize /&lt;Bar&gt;&lt;CR&gt;\r\n\r\n&quot; Tagbar\r\nmap &lt;leader&gt;tt :TagbarToggle&lt;CR&gt;\r\n\r\n&quot; Trailing Space\r\nnmap &lt;leader&gt;fs :FixWhitespace&lt;CR&gt;\r\nvmap &lt;leader&gt;fs :FixWhitespace&lt;CR&gt;\r\n\r\n&quot; Undo tree\r\nmap &lt;Leader&gt;u :UndotreeToggle&lt;CR&gt;\r\n\r\n&quot; Save and quit\r\n&quot; Don\'t forget to add this line in the ~/.bashrc file : stty -ixon\r\nmap &lt;C-s&gt; :w!&lt;CR&gt;\r\nmap &lt;C-q&gt; :q&lt;CR&gt;\r\n&quot; ====================================================\r\n&quot; Plugins configuration\r\n&quot; ====================================================\r\n&quot;\r\n&quot; Clang completition\r\nlet g:clang_library_path=\'/usr/lib/\'\r\n\r\n&quot; Indent Guide\r\nif isdirectory(expand(&quot;~/.vim/bundle/vim-indent-guides/&quot;))\r\n    let g:indent_guides_start_level = 2\r\n    let g:indent_guides_guide_size = 1\r\n    let g:indent_guides_enable_on_vim_startup = 1\r\nendif\r\n\r\n&quot; VIM-LaTeX\r\nlet g:Tex_DefaultTargetFormat = \'pdf\'\r\nlet g:Tex_MultipleCompileFormats = \'pdf, aux\'\r\n\r\n&quot; OMNISharp\r\n&quot;This is the default value, setting it isn\'t actually necessary\r\nlet g:OmniSharp_host = &quot;http://localhost:2000&quot;\r\nlet g:OmniSharp_server_type = \'v1\'\r\nlet g:OmniSharp_server_type = \'roslyn\'\r\n\r\n&quot;Set the type lookup function to use the preview window instead of the status line\r\n&quot;let g:OmniSharp_typeLookupInPreview = 1\r\n\r\n&quot;Timeout in seconds to wait for a response from the server\r\nlet g:OmniSharp_timeout = 1\r\n\r\n&quot;Showmatch significantly slows down omnicomplete\r\n&quot;when the first match contains parentheses.\r\nset noshowmatch\r\n\r\n&quot;Super tab settings - uncomment the next 4 lines\r\n&quot;let g:SuperTabDefaultCompletionType = \'context\'\r\n&quot;let g:SuperTabContextDefaultCompletionType = &quot;&lt;c-x&gt;&lt;c-o&gt;&quot;\r\n&quot;let g:SuperTabDefaultCompletionTypeDiscovery = [&quot;&amp;omnifunc:&lt;c-x&gt;&lt;c-o&gt;&quot;,&quot;&amp;completefunc:&lt;c-x&gt;&lt;c-n&gt;&quot;]\r\n&quot;let g:SuperTabClosePreviewOnPopupClose = 1\r\n\r\n&quot;don\'t autoselect first item in omnicomplete, show if only one item (for preview)\r\n&quot;remove preview if you don\'t want to see any documentation whatsoever.\r\nset completeopt=longest,menuone,preview\r\n&quot; Fetch full documentation during omnicomplete requests.\r\n&quot; There is a performance penalty with this (especially on Mono)\r\n&quot; By default, only Type/Method signatures are fetched. Full documentation can still be fetched when\r\n&quot; you need it with the :OmniSharpDocumentation command.\r\n&quot; let g:omnicomplete_fetch_documentation=1\r\n\r\n&quot;Move the preview window (code documentation) to the bottom of the screen, so it doesn\'t move the code!\r\n&quot;You might also want to look at the echodoc plugin\r\nset splitbelow\r\n\r\n&quot; Get Code Issues and syntax errors\r\nlet g:syntastic_cs_checkers = [\'syntax\', \'semantic\', \'issues\']\r\n&quot; If you are using the omnisharp-roslyn backend, use the following\r\n&quot; let g:syntastic_cs_checkers = [\'code_checker\']\r\naugroup omnisharp_commands\r\n    autocmd!\r\n\r\n    &quot;Set autocomplete function to OmniSharp (if not using YouCompleteMe completion plugin)\r\n    autocmd FileType cs setlocal omnifunc=OmniSharp#Complete\r\n\r\n    &quot; Synchronous build (blocks Vim)\r\n    &quot;autocmd FileType cs nnoremap &lt;F5&gt; :wa!&lt;cr&gt;:OmniSharpBuild&lt;cr&gt;\r\n    &quot; Builds can also run asynchronously with vim-dispatch installed\r\n    autocmd FileType cs nnoremap &lt;leader&gt;b :wa!&lt;cr&gt;:OmniSharpBuildAsync&lt;cr&gt;\r\n    &quot; automatic syntax check on events (TextChanged requires Vim 7.4)\r\n    autocmd BufEnter,TextChanged,InsertLeave *.cs SyntasticCheck\r\n\r\n    &quot; Automatically add new cs files to the nearest project on save\r\n    autocmd BufWritePost *.cs call OmniSharp#AddToProject()\r\n\r\n    &quot;show type information automatically when the cursor stops moving\r\n    autocmd CursorHold *.cs call OmniSharp#TypeLookupWithoutDocumentation()\r\n\r\n    &quot;The following commands are contextual, based on the current cursor position.\r\n\r\n    autocmd FileType cs nnoremap gd :OmniSharpGotoDefinition&lt;cr&gt;\r\n    autocmd FileType cs nnoremap &lt;leader&gt;fi :OmniSharpFindImplementations&lt;cr&gt;\r\n    autocmd FileType cs nnoremap &lt;leader&gt;ft :OmniSharpFindType&lt;cr&gt;\r\n    autocmd FileType cs nnoremap &lt;leader&gt;fs :OmniSharpFindSymbol&lt;cr&gt;\r\n    autocmd FileType cs nnoremap &lt;leader&gt;fu :OmniSharpFindUsages&lt;cr&gt;\r\n    &quot;finds members in the current buffer\r\n    autocmd FileType cs nnoremap &lt;leader&gt;fm :OmniSharpFindMembers&lt;cr&gt;\r\n    &quot; cursor can be anywhere on the line containing an issue\r\n    autocmd FileType cs nnoremap &lt;leader&gt;x  :OmniSharpFixIssue&lt;cr&gt;\r\n    autocmd FileType cs nnoremap &lt;leader&gt;fx :OmniSharpFixUsings&lt;cr&gt;\r\n    autocmd FileType cs nnoremap &lt;leader&gt;tt :OmniSharpTypeLookup&lt;cr&gt;\r\n    autocmd FileType cs nnoremap &lt;leader&gt;dc :OmniSharpDocumentation&lt;cr&gt;\r\n    &quot;navigate up by method/property/field\r\n    autocmd FileType cs nnoremap &lt;C-K&gt; :OmniSharpNavigateUp&lt;cr&gt;\r\n    &quot;navigate down by method/property/field\r\n    autocmd FileType cs nnoremap &lt;C-J&gt; :OmniSharpNavigateDown&lt;cr&gt;\r\n\r\naugroup END\r\nlet g:Omnisharp_start_server = 0\r\nlet g:Omnisharp_stop_server = 0\r\n\r\n&quot; Recommended key-mappings.\r\n&quot; &lt;TAB&gt;: completion.\r\ninoremap &lt;expr&gt;&lt;TAB&gt;  pumvisible() ? &quot;\\&lt;C-n&gt;&quot; : &quot;\\&lt;TAB&gt;&quot;\r\n&quot; &lt;C-h&gt;, &lt;BS&gt;: close popup and delete backword char.\r\n\r\n&quot; Numbers.vim\r\nif isdirectory(expand(&quot;~/.vim/bundle/numbers.vim&quot;))\r\n    let g:enable_numbers = 1\r\n    let g:numbers_exclude = [\'unite\', \'startify\', \'w3m\', \'vimshell\', \'tagbar\', \'gundo\', \'minibufexpl\', \'nerdtree\']\r\n    :au FocusLost * :set number\r\n    :au FocusGained * :set relativenumber\r\n    autocmd InsertEnter * :set number\r\n    autocmd InsertLeave * :set relativenumber\r\n    &quot; Source : http://jeffkreeftmeijer.com/2012/relative-line-numbers-in-vim-for-super-fast-movement/\r\nendif\r\n\r\n&quot; Python-mode\r\nlet g:pymode_rope = 0\r\nlet g:pymode_rope_lookup_project = 0\r\n&quot; Documentation\r\nlet g:pymode_doc = 1\r\nlet g:pymode_doc_key = \'K\'\r\n\r\n&quot; Linting\r\nlet g:pymode_lint = 1\r\nlet g:pymode_lint_checker = &quot;pyflakes,pep8&quot;\r\n&quot; Auto check on save\r\nlet g:pymode_lint_write = 1\r\n\r\n&quot; Support virtualenv\r\nlet g:pymode_virtualenv = 1\r\n\r\n&quot; Enable breakpoints plugin\r\nlet g:pymode_breakpoint = 1\r\nlet g:pymode_breakpoint_bind = \'&lt;leader&gt;b\'\r\n\r\n&quot; syntax highlighting\r\nlet g:pymode_syntax = 1\r\nlet g:pymode_syntax_all = 1\r\nlet g:pymode_syntax_indent_errors = g:pymode_syntax_all\r\nlet g:pymode_syntax_space_errors = g:pymode_syntax_all\r\n\r\n&quot; Thanks to SPF13-vim the best vim configuration\r\n&quot; Syntastic\r\nset statusline+=%#warningmsg#\r\nset statusline+=%{SyntasticStatuslineFlag()}\r\nset statusline+=%*\r\nlet g:syntastic_always_populate_loc_list = 1\r\nlet g:syntastic_auto_loc_list = 1\r\nlet g:syntastic_check_on_open = 1\r\nlet g:syntastic_check_on_wq = 0\r\n&quot; The place of the android sdk\r\nlet g:syntastic_java_javac_classpath = \'~/opt/android-sdk/platforms/android-21/*.jar\'\r\n\r\n&quot; Undo tree\r\nlet g:undotree_SetFocusWhenToggle=1\r\n\r\n&quot;=====================================================\r\n&quot; Theme\r\n&quot;=====================================================\r\n&quot; Set the full color compatibility for vim and terminal\r\nsyntax on\r\ncolor dracula\r\nif has(\'gui_running\')\r\n  set guifont=Deja\\Vu\\ Sans\\ Mono\\ 12\r\nendif\r\nset guioptions-=m  &quot;remove menu bar\r\nset guioptions-=T  &quot;remove toolbar\r\nset guioptions-=r  &quot;remove right-hand scroll bar\r\nset guioptions-=L  &quot;remove left-hand scroll bar','2017-05-31 11:05:59',3,2),(6,'Mic','1.14','{\r\n    &quot;glossary&quot;: {\r\n        &quot;title&quot;: &quot;example glossary&quot;,\r\n		&quot;GlossDiv&quot;: {\r\n            &quot;title&quot;: &quot;S&quot;,\r\n			&quot;GlossList&quot;: {\r\n                &quot;GlossEntry&quot;: {\r\n                    &quot;ID&quot;: &quot;SGML&quot;,\r\n					&quot;SortAs&quot;: &quot;SGML&quot;,\r\n					&quot;GlossTerm&quot;: &quot;Standard Generalized Markup Language&quot;,\r\n					&quot;Acronym&quot;: &quot;SGML&quot;,\r\n					&quot;Abbrev&quot;: &quot;ISO 8879:1986&quot;,\r\n					&quot;GlossDef&quot;: {\r\n                        &quot;para&quot;: &quot;A meta-markup language, used to create markup languages such as DocBook.&quot;,\r\n						&quot;GlossSeeAlso&quot;: [&quot;GML&quot;, &quot;XML&quot;]\r\n                    },\r\n					&quot;GlossSee&quot;: &quot;markup&quot;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}','2017-05-31 11:07:22',2,1);
/*!40000 ALTER TABLE `configurations` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `editors`
--

DROP TABLE IF EXISTS `editors`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `editors` (
  `eId` int(11) NOT NULL AUTO_INCREMENT,
  `eName` varchar(50) NOT NULL,
  `eVersion` varchar(24) NOT NULL,
  `eOwner` varchar(30) NOT NULL,
  `eDescription` text NOT NULL,
  `eDate` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `uId` int(11) NOT NULL,
  PRIMARY KEY (`eId`),
  UNIQUE KEY `eName` (`eName`),
  KEY `uId` (`uId`),
  CONSTRAINT `editors_ibfk_1` FOREIGN KEY (`uId`) REFERENCES `users` (`uId`) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `editors`
--

LOCK TABLES `editors` WRITE;
/*!40000 ALTER TABLE `editors` DISABLE KEYS */;
INSERT INTO `editors` VALUES (1,'Visual Studio Code','1.12.2','Microsoft','Visual Studio Code is a lightweight but powerful source code editor which runs on your desktop and is available for Windows, macOS and Linux. It comes with built-in support for JavaScript, TypeScript and Node.js and has a rich ecosystem of extensions for other languages (such as C++, C#, Python, PHP, Go) and runtimes (such as .NET and Unity). Begin your journey with VS Code with these introductory videos.','2017-05-31 10:28:32',2),(2,'Vim','8.0.0402','Bram Moolenaar','Vim (/v╔¬m/ a contraction of Vi IMproved) is a clone of Bill Joy\'s vi text editor program for Unix. It was written by Bram Moolenaar based on source for a port of the Stevie editor to the Amiga and first released publicly in 1991. Vim is designed for use both from a command-line interface and as a standalone application in a graphical user interface. Vim is free and open source software and is released under a license that includes some charityware clauses,.','2017-05-31 12:36:45',3),(3,'Emacs','25.2','FSF','GNU Emacs is the most popular and most ported Emacs text editor. It was created by GNU Project founder Richard Stallman. In common with other varieties of Emacs, GNU Emacs is extensible using a Turing complete programming language. GNU Emacs has been called &quot;the most powerful text editor available today.&quot; With proper support from the underlying system, GNU Emacs is able to display files in multiple character sets, and has been able to simultaneously display most human languages since at least.','2017-05-31 10:54:14',4);
/*!40000 ALTER TABLE `editors` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `like_configurations`
--

DROP TABLE IF EXISTS `like_configurations`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `like_configurations` (
  `lcId` int(11) NOT NULL AUTO_INCREMENT,
  `uId` int(11) NOT NULL,
  `cId` int(11) NOT NULL,
  PRIMARY KEY (`lcId`),
  KEY `uId` (`uId`),
  KEY `cId` (`cId`),
  CONSTRAINT `like_configurations_ibfk_1` FOREIGN KEY (`uId`) REFERENCES `users` (`uId`) ON DELETE CASCADE,
  CONSTRAINT `like_configurations_ibfk_2` FOREIGN KEY (`cId`) REFERENCES `configurations` (`cId`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `like_configurations`
--

LOCK TABLES `like_configurations` WRITE;
/*!40000 ALTER TABLE `like_configurations` DISABLE KEYS */;
/*!40000 ALTER TABLE `like_configurations` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `like_editors`
--

DROP TABLE IF EXISTS `like_editors`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `like_editors` (
  `leId` int(11) NOT NULL AUTO_INCREMENT,
  `uId` int(11) NOT NULL,
  `eId` int(11) NOT NULL,
  PRIMARY KEY (`leId`),
  KEY `uId` (`uId`),
  KEY `eId` (`eId`),
  CONSTRAINT `like_editors_ibfk_1` FOREIGN KEY (`uId`) REFERENCES `users` (`uId`) ON DELETE CASCADE,
  CONSTRAINT `like_editors_ibfk_2` FOREIGN KEY (`eId`) REFERENCES `editors` (`eId`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `like_editors`
--

LOCK TABLES `like_editors` WRITE;
/*!40000 ALTER TABLE `like_editors` DISABLE KEYS */;
/*!40000 ALTER TABLE `like_editors` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users`
--

DROP TABLE IF EXISTS `users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `users` (
  `uId` int(11) NOT NULL AUTO_INCREMENT,
  `uLogin` varchar(30) NOT NULL,
  `uEmail` varchar(255) NOT NULL,
  `uPassword` varbinary(255) NOT NULL,
  `uDate` date NOT NULL,
  `uCountry` varchar(255) NOT NULL,
  `uActive` tinyint(1) NOT NULL,
  PRIMARY KEY (`uId`),
  UNIQUE KEY `uLogin` (`uLogin`),
  UNIQUE KEY `uEmail` (`uEmail`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `users`
--

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
INSERT INTO `users` VALUES (1,'root','root@local.dev',0x28424DF6F92940C3AFD1C43D111CCD7600743CC9EE0F9F74E1CA8E8E074DD9DA,'2017-01-01','Belgium',1),(2,'bill','gates@local.dev',0x28424DF6F92940C3AFD1C43D111CCD7600743CC9EE0F9F74E1CA8E8E074DD9DA,'2017-01-01','Belgium',1),(3,'gquittet','g.quittet@local.dev',0x28424DF6F92940C3AFD1C43D111CCD7600743CC9EE0F9F74E1CA8E8E074DD9DA,'1996-12-30','Belgium',1),(4,'rstallman','stallman@local.dev',0x28424DF6F92940C3AFD1C43D111CCD7600743CC9EE0F9F74E1CA8E8E074DD9DA,'1953-03-16','United States',1);
/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2017-05-31 15:18:23
